{"version":3,"sources":["components/card/card.component.jsx","components/cardLists/cardList.component.jsx","components/search-box/searchBox.component.jsx","MonsterApp.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","MonsterApp","state","searchField","bind","fetch","then","response","json","users","console","log","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qVAGaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACxB,4BAAML,EAAMI,QAAQE,MACpB,2BAAIN,EAAMI,QAAQG,UCSbC,EAAW,SAACR,GAAD,OACpB,yBAAKC,UAAY,YACLD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMO,IAAOP,EAAQC,GAAID,QAAWA,SCfvCQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BACIb,UAAY,SACZc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiHHG,E,kDAhHb,aAAc,IAAD,8BACX,gBAoBKC,MAAQ,CACTT,SAAU,GACVU,YAAa,IAKjB,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBA5BT,E,gEAgCO,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAEH,OADAC,QAAQC,IAAIF,GACLA,KAEVH,MAAK,SAAAG,GAAK,OAAI,EAAKG,SAAS,CAACnB,SAAUgB,S,mCAI/BI,GACTC,KAAKF,SAAS,CAACT,YAAcU,EAAEE,OAAOC,U,+BAGlC,MAE2BF,KAAKZ,MAA/BT,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACXc,EAAmBxB,EAASyB,QAAO,SAAA9B,GAAO,OAC5CA,EAAQE,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAiDlD,OACE,yBAAKlC,UAAU,cACX,+CACA,kBAAC,EAAD,CACIY,YAAc,kBACdC,aAAiBgB,KAAKhB,eAE9B,kBAAC,EAAD,CAAUL,SAAYwB,S,GA9GLI,aCKLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0178b5bd.chunk.js","sourcesContent":["import React from 'react';\nimport './cardContainer.style.css'\n\nexport const Card = (props) => (\n    <div className = \"card-container\">\n        <img alt = \"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{ props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport './cardList.styles.css'\nimport {Card} from '../card/card.component'\n\n//Lecture 30 part 1\n/**\nexport const CardList = (props) => (\n <div className = 'cardList'>\n            {props.monsters.map(monster => (\n                <h1 key = {monster.id}>{monster.name}</h1>\n            ))}\n    </div>\n);\n**/\n\n//Lecture 30 Part 2 to use card component to style and card list to display the cardList\nexport const CardList = (props) => (\n    <div className = 'cardList'>\n               {props.monsters.map(monster => (\n                <Card key = {monster.id} monster = {monster} />\n               ))}\n       </div>\n   );\n//Lecture 29\n/**\n * export const CardList = props =>{\n * console.log(props);\n * return <div> {props.children} </div>;\n * }\n */","import React from 'react';\nimport '../search-box/searchBox.styles.css'\n\n/* Functional components - Do not have lifecycle methods or state */\nexport const SearchBox = ({placeholder,handleChange}) => (\n    <input \n        className = 'search'\n        type='search' \n        placeholder={placeholder} \n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './components/cardLists/cardList.component'\nimport {SearchBox} from './components/search-box/searchBox.component'\n\n//Instead of the function we can also use the class to render the html\nclass MonsterApp extends Component {\n  //This is a class using render function to do the same thing\n  //what App function does\n  constructor(){\n    super();\n    //Component constructor gives us access to the state variable\n    /** \n    this.state = {\n      monsters : [\n          {\n              name : \"Frankestein\",\n              id :\"100\"\n          },\n          {\n            name : \"Dracula\",\n            id:\"101\"\n        },\n        {\n            name : \"Zombie\",\n            id : \"102\"\n        }\n      ]\n    };\n    **/\n    this.state = {\n        monsters :[],\n        searchField: ''\n    };\n\n    //Lecture 39 using the Class Methods and Arrow function. Replacing e=> to function call \n    //Binding the function context so this keyword works properly inside of function\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  //One of the Lifecycle method is the componentDidMount and using the we are going to fetch data from rest\n  componentDidMount(){\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then (users => {\n          console.log(users);\n          return users;\n      })\n      .then(users => this.setState({monsters: users}));\n  }\n\n  // Exercise 39 using Bind\n  handleChange(e) {\n      this.setState({searchField : e.target.value});\n  }\n\n  render(){\n     /*Destructuring*/\n    const {monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n        )  \n      /**\n      return (\n          <div className=\"MonsterApp\">\n          <CardList name = \"Raghu\">\n              <h1> Raghu Krishnamurthy</h1>\n              {\n                  this.state.monsters.map(monster => (\n                      <h1 key = {monster.id}>{monster.name}</h1>\n                  ))\n              }\n          </CardList>\n          </div>\n        );\n  }**/\n      /** Lecture 33 Part 1 - search filed with target value.\n      return (\n          <div className=\"MonsterApp\">\n              <input type='search' placeholder='search monster' onChange={e => console.log(e.target.value)}/>\n          <CardList monsters = {this.state.monsters} />\n          </div>\n        );\n        */\n       /* Lecture 33 Part 2 - Search field with setting state of the search field\n       return (\n        <div className=\"MonsterApp\">\n            <input type='search' \n                placeholder='search monster' \n                onChange={e => {\n                    this.setState({searchField: e.target.value}, ()=> console.log(this.state));\n                }}/>\n        <CardList monsters = {this.state.monsters} />\n        </div>\n      );\n      */\n\n      /* Lecture 33 Part 3 - Search field with setting state of the search field cleaner version\n      return (\n        <div className=\"MonsterApp\">\n            <SearchBox\n                placeholder = 'search Monsters'\n                handleChange = { e => this.setState({searchField: e.target.value})  } \n            />\n        <CardList monsters = {filteredMonsters} />\n        </div>\n      );\n      */\n     //Lecture 39 using the Class Methods and Arrow function. Replacing e=> to function call\n      return (\n        <div className=\"MonsterApp\">\n            <h1>Monster Rolodex</h1>  \n            <SearchBox\n                placeholder = 'search Monsters'\n                handleChange = { this.handleChange} \n            />\n        <CardList monsters = {filteredMonsters} />\n        </div>\n      );\n  }\n}\nexport default MonsterApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport MonsterApp from './MonsterApp'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MonsterApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}